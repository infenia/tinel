[tool:pytest]
# Pytest configuration for Tinel project

# Test discovery
testpaths = tests
python_files = test_*.py
python_functions = test_*
python_classes = Test*

# Output and reporting
addopts = 
    --verbose
    --tb=short
    --strict-markers
    --strict-config
    --cov=tinel
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-fail-under=85
    --durations=10

# Coverage configuration
[coverage:run]
source = tinel
omit = 
    tests/*
    */test_*
    setup.py
    */venv/*
    */.venv/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    pass
    except ImportError:
    if TYPE_CHECKING:

# Test markers
markers =
    unit: Unit tests - fast, isolated tests of individual components
    integration: Integration tests - test component interactions
    performance: Performance tests - verify performance characteristics  
    security: Security tests - verify security measures
    slow: Slow tests that may take longer to run
    network: Tests that require network access
    sudo: Tests that require sudo privileges
    system: Tests that interact with the actual system (not mocked)

# Minimum version requirements
minversion = 6.0

# Test session configuration
console_output_style = progress
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Warnings configuration
filterwarnings =
    error
    ignore::UserWarning
    ignore::DeprecationWarning:distutils.*
    ignore::PendingDeprecationWarning
    ignore:.*imp module.*:DeprecationWarning

# Parallel execution
# Uncomment to enable parallel test execution
# addopts = -n auto